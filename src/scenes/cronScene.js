import { Scenes } from 'telegraf';
import cron from 'node-cron';
import { getApiClient, getSheetsData } from '../utils/googlesheetutils.js';
import { getEmployeesData, getEmployeesWithBirthdaysThisWeek } from '../utils/utils.js';

const SUBSCRIBE = 'SUBSCRIBE';
const UNSUBSCRIBE = 'UNSUBSCRIBE';
const EXIT = 'EXIT';

const cronTaskMap = {};

export const SetCronScene = new Scenes.WizardScene(
  "setCronScene",
  (ctx) => {
    ctx.reply('–£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É?', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é',
                        callback_data: SUBSCRIBE,
                    }
                ],
                [
                  {
                      text: '–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É',
                      callback_data: UNSUBSCRIBE,
                  }
                ],
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: EXIT,
                    }
                ],
            ] 
        }
    });
    return ctx.wizard.next();
  },
  async (ctx) => {
    const data = ctx?.callbackQuery?.data;

    if (data === EXIT) {
      return ctx.scene.leave();
    }

    if (data === SUBSCRIBE) {
      // every hour
      if (cronTaskMap[`week_${ctx.chat.username}`]) {
        await ctx.reply('–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

        return ctx.scene.leave();
      }

      // 0 * * * * - every hour
      // * * * * * - every minute
      // 0 10 * * * - every day 10:00
      // 0 13 * * FRI - every friday 13:00
      const task = cron.schedule('0 13 * * FRI', async () => {
        const apiClient = await getApiClient();
        const [sheet] = await getSheetsData(apiClient);
        const employeesData = await getEmployeesData(sheet.data[0].rowData);
        const hasBirthdays = await getEmployeesWithBirthdaysThisWeek(employeesData);

        if (hasBirthdays.length) {
          const employeesStr = hasBirthdays.reduce((acc, employee) => {
            if (employee) {
              return `${acc}\n–ò–º—è: ${employee.name}\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${employee.bDay}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${employee.comment}\n`
            }

            return acc;
          }, '');

          ctx.reply(`ü•≥ üéâ ü•≥ üéâ ü•≥\n\n–£—Ä–∞! –ü–æ—Ö–æ–∂–µ —á—Ç–æ –∫–æ–µ —É –∫–æ–≥–æ —Å–∫–æ—Ä–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n ${employeesStr}`);
        }
      }, { scheduled: false, timezone: 'Europe/Moscow' });
      cronTaskMap[`week_${ctx.chat.username}`] = task;
      cronTaskMap[`week_${ctx.chat.username}`].start();
      await ctx.reply('–£—Ä–∞! –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

      return ctx.scene.leave();
    }

    if (data === UNSUBSCRIBE) {
      if (cronTaskMap[`week_${ctx.chat.username}`]) {
        cronTaskMap[`week_${ctx.chat.username}`].stop();
        await ctx.reply('–£—Ä–∞! –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!');
      }

      return ctx.scene.leave();
    }
  }
);
